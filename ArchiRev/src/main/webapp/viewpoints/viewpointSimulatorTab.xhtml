<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui"
	xmlns:pe="http://primefaces.org/ui/extensions"
	xmlns:c="http://xmlns.jcp.org/jsp/jstl/core">

	<p:tab title="Viewpoint Simulator">

		<p:panel id="viewpointsSimulatorPanel"
			widgetVar="viewpointsSimulatorPanel" header="Viewpoint Simulator"
			toggleable="true" toggleSpeed="500"
			style="margin-bottom:10px; width:100%" width="100%">

			<p:panelGrid style="width:100%; border: none; padding:0px;"
				columns="1"
				columnClasses="viewpointSimulatorLeft, viewpointSimulatorRight">
				<p:panelGrid columns="3" style="padding:0px;">
					<p:panelGrid style="padding:0px;">
						<p:pickList id="artifactPickList" widgetVar="artifactPickList"
							style="width:100%;"
							value="#{viewpointController.artifactPickerList}" var="artifact"
							itemValue="#{artifact}" itemLabel="#{artifact.name}"
							showCheckbox="true" responsive="true" showSourceFilter="true"
							showTargetFilter="true" filterMatchMode="contains"
							converter="entityConverter">
							<f:facet name="sourceCaption">Available artifacts</f:facet>
							<f:facet name="targetCaption">Input artifacts</f:facet>
						</p:pickList>
					</p:panelGrid>
					<p:panelGrid style="padding:0px;">
						<p:pickList id="stakeholderPickList"
							widgetVar="stakeholderPickList" style="width:100%;"
							value="#{viewpointController.stakeholderPickerList}"
							var="stakeholder" itemValue="#{stakeholder}"
							itemLabel="#{stakeholder.name}" showCheckbox="true"
							responsive="true" showSourceFilter="true" showTargetFilter="true"
							filterMatchMode="contains" converter="entityConverter">
							<f:facet name="sourceCaption">Available roles</f:facet>
							<f:facet name="targetCaption">Involved roles</f:facet>
						</p:pickList>
					</p:panelGrid>
					<p:panel header="Simulations" id="simulationButtonsPanel">
						<p:panelGrid id="simulationButtonsTable" style="padding:0px;" columns="1">
							<p:commandButton value="Automatic from Input Artifacts"
								actionListener="#{viewpointController.simulateViewpointsByArtifact}" update="mainForm:viewpointsTabs:viewpointMap"/>	
							<p:commandButton value="Manual by Stakeholders"
								actionListener="#{viewpointController.simulateViewpointsByStakeholder}" update="mainForm:viewpointsTabs:viewpointMap"/>
							<p:commandButton value="Semiautomatic (both)"
								actionListener="#{viewpointController.simulateViewpointsByArtifactAndStakeholder}" update="mainForm:viewpointsTabs:viewpointMap"/>
						</p:panelGrid>
					</p:panel>
				</p:panelGrid>
				<p:separator />
				<p:outputPanel style="padding:0px;">

					<p:panelGrid id="viewpointMap" style="width: 100%; margin: 0px; font-size: small !important">
						<p:row>
							<p:column colspan="2">
								<p:panel toggleable="true" header="Strategy Viewpoints">
									<p:panelGrid id="strategyMap"
										style="width: 100%; margin: 0px; border-collapse: separate; border-spacing:10px;">
										<p:row>
											<p:column colspan="9" style="background-color: hsl(#{viewpointController.getPercentage('Strategy')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Strategy"/>
												<p:outputLabel styleClass="viewpointName" value="#{viewpointName}"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
										</p:row>
										<p:row>
											<p:column colspan="5" style="background-color: hsl(#{viewpointController.getPercentage('Capability Map')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Capability Map"/>
												<p:outputLabel styleClass="viewpointName" value="Capability&lt;br/&gt;Map" escape="false"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
											<p:column colspan="4" style="background-color: hsl(#{viewpointController.getPercentage('Resource Map')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Resource Map"/>
												<p:outputLabel styleClass="viewpointName" value="Resource&lt;br/&gt;Map" escape="false"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
										</p:row>
									</p:panelGrid>
								</p:panel>
							</p:column>
							<p:column rowspan="2">
								<p:panel toggleable="true" header="Implementation and Migration">
									<p:panelGrid id="implementationMigrationMap"
										style="width: 100%; margin: 0px; border-collapse: separate; border-spacing:10px;">

										<p:row>
											<p:column colspan="2" rowspan="3" style="background-color: hsl(#{viewpointController.getPercentage('Project')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Project"/>
												<p:outputLabel styleClass="viewpointName" value="#{viewpointName}"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
										</p:row>
										<p:row />
										<p:row />
										<p:row>
											<p:column rowspan="10" style="background-color: hsl(#{viewpointController.getPercentage('Implementation and Migration')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Implementation and Migration"/>
												<p:outputLabel styleClass="viewpointName" value="Implementation&lt;br/&gt;and&lt;br/&gt;Migration" escape="false"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
											<p:column rowspan="10" style="background-color: hsl(#{viewpointController.getPercentage('Migration')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Migration"/>
												<p:outputLabel styleClass="viewpointName" value="#{viewpointName}"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
										</p:row>
										<p:row />
										<p:row />
										<p:row />
										<p:row />
										<p:row />
										<p:row />
										<p:row />
										<p:row />
										<p:row />
									</p:panelGrid>
								</p:panel>
							</p:column>
						</p:row>
						<p:row>
							<p:column>
								<p:panel toggleable="true" header="Basic Viewpoints">
									<p:panelGrid id="basicViewpointMap"
										style="width: 100%; margin: 0px; border-collapse: separate; border-spacing:10px;">
										<p:row>
											<p:column colspan="5" style="background-color: hsl(#{viewpointController.getPercentage('Organization')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Organization"/>
												<p:outputLabel styleClass="viewpointName" value="#{viewpointName}"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
										</p:row>
										<p:row>
											<p:column rowspan="9" style="background-color: hsl(#{viewpointController.getPercentage('Layered')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Layered"/>
												<p:outputLabel styleClass="viewpointName" value="#{viewpointName}"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
											<p:column colspan="2" rowspan="2" style="background-color: hsl(#{viewpointController.getPercentage('Product')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Product"/>
												<p:outputLabel styleClass="viewpointName" value="#{viewpointName}"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
											<p:column colspan="2" rowspan="3" style="background-color: hsl(#{viewpointController.getPercentage('Service Realization')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Service Realization"/>
												<p:outputLabel styleClass="viewpointName" value="Service&lt;br/&gt;Realization" escape="false"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />											
											</p:column>
										</p:row>
										<p:row />
										<p:row>
											<p:column rowspan="4" style="background-color: hsl(#{viewpointController.getPercentage('Information Structure')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Information Structure"/>
												<p:outputLabel styleClass="viewpointName" value="Information&lt;br/&gt;Structure" escape="false"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
											<p:column rowspan="2" style="background-color: hsl(#{viewpointController.getPercentage('Business Process Cooperation')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Business Process Cooperation"/>
												<p:outputLabel styleClass="viewpointName" value="Business&lt;br/&gt;Process&lt;br/&gt;Cooperation" escape="false"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
										</p:row>
										<p:row>
											<p:column colspan="2" rowspan="2" style="background-color: hsl(#{viewpointController.getPercentage('Application Usage')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Application Usage"/>
												<p:outputLabel styleClass="viewpointName" value="Application&lt;br/&gt;Usage" escape="false"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
										</p:row>
										<p:row>
											<p:column rowspan="2" style="background-color: hsl(#{viewpointController.getPercentage('Application Cooperation')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Application Cooperation"/>
												<p:outputLabel styleClass="viewpointName" value="Application&lt;br/&gt;Cooperation" escape="false"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
										</p:row>
										<p:row>
											<p:column rowspan="3" style="background-color: hsl(#{viewpointController.getPercentage('Technology Usage')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Technology Usage"/>
												<p:outputLabel styleClass="viewpointName" value="Technology&lt;br/&gt;Usage" escape="false"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
											<p:column rowspan="4" style="background-color: hsl(#{viewpointController.getPercentage('Implementation and Deployment')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Implementation and Deployment"/>
												<p:outputLabel styleClass="viewpointName" value="Implementation&lt;br/&gt;and&lt;br/&gt;Deployment" escape="false"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
										</p:row>
										<p:row>
											<p:column colspan="2" rowspan="2" style="background-color: hsl(#{viewpointController.getPercentage('Technology')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Technology"/>
												<p:outputLabel styleClass="viewpointName" value="#{viewpointName}"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
										</p:row>
										<p:row />
										<p:row>
											<p:column colspan="3" style="background-color: hsl(#{viewpointController.getPercentage('Physical')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Physical"/>
												<p:outputLabel styleClass="viewpointName" value="#{viewpointName}"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
										</p:row>
									</p:panelGrid>
								</p:panel>
							</p:column>
							<p:column>
								<p:panel toggleable="true" header="Motivation Viewpoints">
									<p:panelGrid id="motivationMap"
										style="width: 100%; margin: 0px; border-collapse: separate; border-spacing:10px;">

										<p:row>
											<p:column rowspan="10" style="background-color: hsl(#{viewpointController.getPercentage('Outcome Realization')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Outcome Realization"/>
												<p:outputLabel styleClass="viewpointName" value="Outcome&lt;br/&gt;Realization" escape="false"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
											<p:column style="background-color: hsl(#{viewpointController.getPercentage('Stakeholder')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Stakeholder"/>
												<p:outputLabel styleClass="viewpointName" value="#{viewpointName}"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
											<p:column style="background-color: hsl(#{viewpointController.getPercentage('Motivation')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Motivation"/>
												<p:outputLabel styleClass="viewpointName" value="#{viewpointName}"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
											<p:column style="background-color: hsl(#{viewpointController.getPercentage('Goal Realization')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Goal Realization"/>
												<p:outputLabel styleClass="viewpointName" value="Goal&lt;br/&gt;Realization" escape="false"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
										</p:row>
										<p:row>
											<p:column colspan="3" rowspan="9" style="background-color: hsl(#{viewpointController.getPercentage('Requirements Realization')}, 100%, 65%, #{viewpointController.coloured ? '1' : '0'});">
												<c:set var="viewpointName" value="Requirements Realization"/>
												<p:outputLabel styleClass="viewpointName" value="Requirements&lt;br/&gt;Realization" escape="false"/>
												<br/>
												<p:commandButton icon="ui-icon-gear" rendered="#{viewpointController.automaticSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageAutomatic(viewpointName)} %"
													actionListener="#{viewpointController.showViewpointInfoAutomatic(viewpointName)}" />
												<p:commandButton icon="ui-icon-person" rendered="#{viewpointController.manualSimulation or viewpointController.hybridSimulation}" styleClass="viewpointPercentage" 
													value="#{not viewpointController.coloured ? '_' : viewpointController.getFormattedPercentageManual(viewpointName)} %" 
													actionListener="#{viewpointController.showViewpointInfoManual(viewpointName)}" />
											</p:column>
										</p:row>
										<p:row />
										<p:row />
										<p:row />
										<p:row />
										<p:row />
										<p:row />
										<p:row />
										<p:row />
									</p:panelGrid>
								</p:panel>
							</p:column>
						</p:row>
					</p:panelGrid>
				</p:outputPanel>
			</p:panelGrid>
		</p:panel>
	</p:tab>
</ui:composition>